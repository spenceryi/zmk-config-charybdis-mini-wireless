#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

#define U_TAPPING_TERM 200

/* Layers */
#define DEF 0
#define QWERTY 1
#define SYM 2
#define NAV 3
#define NUM 4
#define FN 5
#define SYS 6
#define MOUSE 7

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

#define TAB_LEFT &kp LC(LS(TAB))
#define TAB_RIGHT &kp LC(TAB)
#define SWITCH_LANG &kp LC(SPACE)

&sk {
    release-after-ms = <800>;
    quick-release;            
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quikc-tap-ms = <QUICK_TAP_MS>;
};

/ {
    chosen { zmk,matrix_transform = &default_transform; };
};

/ {
    combos {
        compatible = "zmk,combos";

        LeftClickRight {
            bindings = <&mkp LCLK>;
            key-positions = <19 20>;
        };

        RightClickRight {
            bindings = <&mkp RCLK>;
            key-positions = <20 21>;
        };

        MiddleClickRight {
            bindings = <&mkp MCLK>;
            key-positions = <21 22>;
        };

        ParaLeft {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <4 16>;
        };

        ParaRight {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 19>;
        };

        BrakLeft {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <3 15>;
        };

        BrakRight {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <8 20>;
        };

        BraceLeft {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <2 14>;
        };

        BraceRight {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <9 21>;
        };

        Delete {
            bindings = <&kp DELETE>;
            key-positions = <8 9>;
        };

        CapsWord {
            bindings = <&caps_word>;
            key-positions = <17 18>;
        };
    };

    behaviors {
        u_mt: u_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_mt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        u_lt: u_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "u_lt";
            #binding-cells = <2>;
            tapping_term_ms = <U_TAPPING_TERM>;
            flavor = "tap-preferred";
            bindings = <&mo>, <&kp>;
        };

        Shift_Enter: Shift_Enter {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ENTER";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            hold-trigger-key-positions = <40>;
            tapping-term-ms = <100>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
&kp W             &kp L             &kp Y          &kp P               &kp B               &kp Z       &kp F               &kp O          &kp U              &kp SQT
&kp C             &kp R             &kp S          &kp T               &kp G               &kp M       &kp N               &kp E          &kp I              &kp A
&kp Q             &kp J             &kp V          &kp D               &kp K               &kp X       &kp H               &kp COMMA      &kp DOT            &kp FSLH
                                    XXX            &kp SPACE           XXX                 &kp RET     &kp RSHFT
            >;
        };

        QWERTY {
            bindings = <
&kp Q             &kp W             &kp E          &kp R               &kp T               &kp Y       &kp U               &kp I          &kp O              &kp P
&kp A             &kp S             &kp D          &kp F               &kp G               &kp H       &kp J               &kp K          &kp L              &kp SEMI
&kp Z             &kp X             &kp C          &kp V               &kp B               &kp M       &kp M               ___            ___                ___
                                    ___            ___                 ___                 ___         ___
            >;            
        };

        SYM {
            bindings = <
&kp ESC           &kp LBKT          &kp LBRC        &kp LPAR           &kp LT              &kp GT     &kp RPAR            &kp RBRC          &kp RBKT        &kp GRAVE
&kp MINUS         &kp STAR          &kp EQUAL       &kp UNDER          &kp DLLR            &kp HASH   &sk LGUI            &sk LALT          &sk LCTRL       &sk RSHFT
&kp PLUS          &kp PIPE          &kp AT          &kp FSLH           &kp PRCNT           &kp SQT    &kp BSLH            $kp AMPS          &kp CARET       &kp TILDE
                                    ___             ___                ___                 ___        ___
            >;            
        };

        NAV {
            bindings = <
&kp TAB           XXX               TAB_LEFT        TAB_RIGHT          &kp C_VOL_UP        &kp PG_UP     &kp BSPC            &kp RBRC          &kp RBKT        &kp GRAVE
&sk LSHFT         &sk LCTRL         &sk LALT        &sk LGUI           &kp C_VOL_DN        &kp PG_DN     &sk LGUI            &sk LALT          &sk LCTRL       &sk RSHFT
XXX               XXX               XXX             XXX                &kp C_MUTE          XXX           SWITCH_LANG         $tog QWERTY       XXX             XXX
                                    ___             ___                ___                 ___        ___
            >;            
        };

        SYMNUM {
            bindings = <
&bt BT_CLR  &kp EXCL      &kp AT       &kp HASH    &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS                 &kp KP_MULTIPLY   &kp LPAR              &kp RPAR              &kp DEL
&trans      &trans        &bt BT_PRV   &bt BT_NXT  &trans    &trans       &kp UNDER  &u_mt RIGHT_SHIFT EQUAL  &u_mt RCTRL LBKT  &u_mt RIGHT_ALT RBKT  &u_mt RIGHT_GUI BSLH  &kp GRAVE
&trans      &out OUT_TOG  &bootloader  &trans      &trans    &trans       &kp MINUS  &kp PLUS                 &kp LBRC          &kp RBRC              &kp PIPE              &kp TILDE
                                       &trans      &trans    &mo 3        &trans     &trans
            >;
        };

        FUN {
            bindings = <
&trans  &trans   &kp F1  &kp F2   &kp F3   &kp F4     &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2       &bt BT_SEL 3     &bt BT_SEL 4  &bt BT_CLR
&trans  &kp DEL  &kp F5  &kp F6   &kp F7   &kp F8     &out OUT_TOG  &kp K_PLAY_PAUSE  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_MUTE    &kp LALT
&trans  &trans   &kp F9  &kp F10  &kp F11  &kp F12    &trans        &trans            &trans             &trans           &trans        &to 0
                         &trans   &trans   &trans     &trans        &trans
            >;
        };

        AUTO-MOUSE {
            bindings = <
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans     &trans  &trans       &trans  &trans  &trans  &trans  &trans  &trans
                        &mkp LCLK  &trans  &mkp RCLK    &trans  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans    &trans  &trans
            >;
        };
    };
};
